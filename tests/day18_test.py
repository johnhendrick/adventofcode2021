import pytest
from adventcode.day18 import (split_, magnitude, explode, add,
                              traverse_recurse, parse_file, reduce_)


@pytest.mark.parametrize("data, expected", [
    ([[[[0, 7], 4], [15, [0, 13]]], [1, 1]],
     [[[[0, 7], 4], [[7, 8], [0, 13]]], [1, 1]]),
    ([[[[0, 7], 4], [[7, 8], [0, 13]]], [1, 1]], [
        [[[0, 7], 4], [[7, 8], [0, [6, 7]]]], [1, 1]])
])
def test_split(data, expected):
    split_(data)
    assert data == expected


@ pytest.mark.parametrize("data, expected", [
    ([[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]],
     [[[[0, 7], 4], [15, [0, 13]]], [1, 1]]),
    ([[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]],
     [[3, [2, [8, 0]]], [9, [5, [7, 0]]]]),
    ([[[[0, 7], 4], [15, [0, 13]]], [1, 1]],
     [[[[0, 7], 4], [15, [0, 13]]], [1, 1]]),
    ([[[[[1, 1], [2, 2]], [3, 3]], [4, 4]], [5, 5]],
     [[[[3, 0], [5, 3]], [4, 4]], [5, 5]]),
    ([[[[[6, 6], [6, 6]], [[6, 0], [6, 7]]],
       [[[7, 7], [8, 9]], [8, [8, 1]]]], [2, 9]],
     [[[[12, 12], [6, 14]], [[15, 0], [25, 0]]], [3, 9]]),
])
def test_explode(data, expected):
    assert explode(data) == expected


@ pytest.mark.parametrize("data, expected", [
    ([1, 9], 21),
    ([[1, 2], [[3, 4], 5]], 143),
    ([[[[5, 0], [7, 4]], [5, 5]], [6, 6]], 1137),
    ([[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]], 3488)
])
def test_magnitude(data, expected):
    assert magnitude(data) == expected


@ pytest.mark.parametrize("left, right, expected", [
    ([1, 2], [[3, 4], 5],
        [[1, 2], [[3, 4], 5]]),
    (None, [[3, 4], 5], [[3, 4], 5]),
    ([[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1], [
     [[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]])
])
def test_add(left, right, expected):
    assert add(left, right) == expected


@ pytest.mark.parametrize("a, most_left ,expected, new_a", [
    ([1, 2, [2, -1]], True, -98, [-98, 2, [2, -1]]),
    ([[20, 0], 2, [2, -1]], True, 0, [[-79, 0], 2, [2, -1]]),
    ([1, 2, [2, -1]], False, -99, [1, 2, [2, -100]])
])
def test_update_most_left_right(a, most_left, expected, new_a):
    # assert traverse_recurse(a, most_left=most_left) == expected
    _ = traverse_recurse(a, most_left=most_left)
    assert a == new_a


sample = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""
sample = parse_file(file_content=sample)
sample_expected = [[[[6, 6], [7, 6]], [[7, 7], [7, 0]]],
                   [[[7, 7], [7, 7]], [[7, 8], [9, 9]]]]


@ pytest.mark.parametrize("data, expected", [
    ([[1, 1], [2, 2], [3, 3], [4, 4]], [[[[1, 1], [2, 2]], [3, 3]], [4, 4]]
     ),
    ([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],
     [[[[3, 0], [5, 3]], [4, 4]], [5, 5]]),
    ([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]],
     [[[[5, 0], [7, 4]], [5, 5]], [6, 6]]),
    ([[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]],
     [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]),
    ([[6, [5, [4, [3, 2]]]], 1], [[6, [5, [7, 0]]], 3]),
    ([[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]],
     [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]),
    # (sample, sample_expected),
    ([[[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
      [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]]],
     [[[[4, 0], [5, 4]], [[7, 7], [6, 0]]],
      [[8, [7, 7]], [[7, 9], [5, 0]]]]),

    ([[[[[4, 0], [5, 4]], [[7, 7], [6, 0]]], [[8, [7, 7]], [[7, 9], [5, 0]]]],
      [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]]],
     [[[[6, 7], [6, 7]], [[7, 7], [0, 7]]],
     [[[8, 7], [7, 7]], [[8, 8], [8, 0]]]]),

    ([[[[[6, 7], [6, 7]], [[7, 7], [0, 7]]],
       [[[8, 7], [7, 7]], [[8, 8], [8, 0]]]],
      [[[[2, 4], 7], [6, [0, 5]]],
        [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]]],
        [[[[7, 0], [7, 7]], [[7, 7], [7, 8]]],
         [[[7, 7], [8, 8]], [[7, 7], [8, 7]]]]),

    ([[[[[7, 0], [7, 7]], [[7, 7], [7, 8]]],
       [[[7, 7], [8, 8]], [[7, 7], [8, 7]]]], [7, [5, [
           [3, 8], [1, 4]]]]], [[[[7, 7], [7, 8]], [[9, 5], [8, 7]]],
                                [[[6, 8], [0, 8]], [[9, 9], [9, 0]]]]),

    ([[[[[7, 7], [7, 8]], [[9, 5], [8, 7]]],
       [[[6, 8], [0, 8]], [[9, 9], [9, 0]]]],
        [[2, [2, 2]],
         [8, [8, 1]]]], [[[[6, 6], [6, 6]], [[6, 0], [6, 7]]],
                         [[[7, 7], [8, 9]], [8, [8, 1]]]]),

    ([[[[[6, 6], [6, 6]], [[6, 0], [6, 7]]], [[[7, 7], [8, 9]], [8, [8, 1]]]],
      [2, 9]], [[[[6, 6], [7, 7]], [[0, 7], [7, 7]]], [[[5, 5], [5, 6]], 9]]),

    ([[[[[6, 6], [7, 7]], [[0, 7], [7, 7]]], [[[5, 5], [5, 6]], 9]],
      [1, [[[9, 3], 9], [[9, 0], [0, 7]]]]], [
        [[[7, 8], [6, 7]], [[6, 8], [0, 8]]], [[[7, 7], [5, 0]],
                                               [[5, 5], [5, 6]]]]),

    ([[[[[7, 8], [6, 7]], [[6, 8], [0, 8]]],
       [[[7, 7], [5, 0]], [[5, 5], [5, 6]]]], [
     [[5, [7, 4]], 7], 1]], [[[[7, 7], [7, 7]],
                              [[8, 7], [8, 7]]], [[[7, 0], [7, 7]], 9]]),

    ([[[[[7, 7], [7, 7]], [[8, 7], [8, 7]]],
       [[[7, 0], [7, 7]], 9]], [[[[4, 2], 2], 6], [
           8, 7]]], [[[[8, 7], [7, 7]], [[8, 6], [7, 7]]],
                     [[[0, 7], [6, 6]], [8, 7]]])
])
def test_reduce(data, expected):
    assert reduce_(data) == expected
